var $jscomp={scope:{},findInternal:function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};
$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};
$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},"es6-impl","es3");var Task=require("task"),Pathing=require("pathing"),Harvest=function(a,b){this.init(a,b)};Harvest.prototype=Object.create(Task.prototype);Harvest.prototype.constructor=Harvest;Harvest.prototype.init=function(a,b){Task.call(this);this.type="harvest";this.failIn=a||10;this.source=b};
Harvest.prototype.canAssign=function(a){var b=Game.getObjectById(a.memory.homeSource);if(a.spawning||150>a.ticksToLive||_.sum(a.carry)===a.carryCapacity||!b||0===a.getActiveBodyparts(WORK)||0===b.energy&&(b=a.room.find(FIND_SOURCES_ACTIVE)[0],!b))return!1;this.source=b.id;Task.prototype.assign.call(this,a);return!0};
Harvest.prototype.run=function(a){var b=Game.getObjectById(this.source||a.memory.homeSource);150>a.ticksToLive||_.sum(a.carry)===a.carryCapacity||!b||0===b.energy||0===a.getActiveBodyparts(WORK)?Task.prototype.complete.call(this,a):(Pathing.moveTo(a,b,1),a.harvest(b)===OK?(void 0===Memory.rooms[a.room.name].harvested&&(Memory.rooms[a.room.name].harvested=3E4),Memory.rooms[a.room.name].harvested+=2*a.getActiveBodyparts(WORK)):(this.failIn--,0===this.failIn&&Task.prototype.complete.call(this,a)))};
Harvest.prototype.toObj=function(a){a.memory.currentTask={type:this.type,failIn:this.failIn,source:this.source}};Harvest.fromObj=function(a){return new Harvest(a.memory.currentTask.failIn,a.memory.currentTask.source)};require("screeps-profiler").registerObject(Harvest,"TaskHarvest");module.exports=Harvest;